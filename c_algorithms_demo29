#include <stdio.h>
#include <string.h>
#include <stdlib.h>  
#include <math.h>
#include <malloc.h>
struct Student{
  int sid;
  char name[200];
  int age;
};
struct Student * creat(){
   struct Student * p=(struct Student *)malloc(sizeof(struct Student) );
   	p->sid=100;
	strcpy(p->name,"test");
	p->age=100;
   return p;
}
struct Arr{
  int * pBase;//存储的数组是第一个元素的地址 
  int len; //数组所能容纳的最大元素的个数 
  int cnt;//当前数组有效元素的个数 
}
/**
void show(struct Student *pst){
	printf("%d %s %d\n",pst->sid,pst->name,pst->age);
}
*/
bool is_empty(struct Arr * pArr){
	if(0 == pArr->cnt){
	   return true;
	}else{
	   return false;
	}
}
void init_arr(struct Arr *pArr,int length){
	pArr->pBase=(int *)malloc(sizeof(int)*length);
    if(NULL == pArr->pBase)
    {
    	printf("动态内存分配失败!\n");
    	exit(-1);//终止整个程序 
    }
    else
    {
    	pArr->len=length;
    	pArr->cnt=0;
    }
    return;
}
void show_arr(struct Arr * pArr){
   if(is_empty(pArr))
   {
   	 printf("数组为空!\n");
   }
   else
   {  
      int i;
   	  for( i=0;i<pArr->cnt;++i)
   	     printf("%d ",pArr->pBase[i]);
   	   printf("\n");  
   }
}
bool append_arr(struct Arr * pArr,int val)
{
	 if(is_full(pArr))
	    return false;
	 pArr->pBase[pArr->cnt]=val;
	 pArr->cnt++;
	 return true;
}
bool insert_arr(struct Arr * pArr,int pos,int val)
{
	int i;
	if(is_full(pArr))
	   return false;
	if(pos<1 || pos>pArr->cnt+1)
	   return false;
	for(i=pArr->cnt-1;i>=pos-1;--i)
	{
		pArr->pBase[i+1]=pArr->pBase[i];
	}
	pArr->pBase[pos-1]=val;
	return true;
}
bool delete_arr(struct Arr * pArr,int pos,int * pVal)
{
	if(is_empty(pArr))
	    return false;
	 if(pos<1 || pos>pArr->cnt)
        return false; 
	*pVal=pArr->pBase[pos-1];
	for(i=pos;i<pArr->cnt;++i)
	{
		pArr->pBase[i-1]=pArr->pBase[i];
	}
}
void inversion_arr(struct Arr * pArr)
{
	int i=0;
	int j=pArr->cnt-1;
	int t;
	while(i<j)
	{
		t=pArr->pBase[i];
		pArr->pBase[i]=pArr->pBase[j];
		pArr->pBase[j]=t;
		i++;
		j--;
	}
}
void sort_arr(struct Arr * pArr){
  int i,j,t;
  for(i=0;i<pArr->cnt;++i)
  {
  	for(j=i+1;l<pArr->cnt;j++)
  	{
  		if( pArr->pBase[i]>pArr->pBase[j]){
  				t=pArr->pBase[i];
		        pArr->pBase[i]=pArr->pBase[j];
		       pArr->pBase[j]=t;
  		}
  	}
  }
}
int main()
{  
  struct Student stu={12,"pengke",21};
  struct Student *pst=&stu;
  struct Student *pst2;
  struct Arr arr;
  int a[5]={2,4,6,8,10};
  int * pArr=(int *)malloc(sizeof(int)*5);
  int j;
  struct Student *p1= creat();
  pst2->sid=13;
  strcpy(pst2->name,"hello,world");
  pst2->age=13;
  strcpy(pst->name,"pengke2");//(*pst).name="pengke2"
  //show(&p1);
  //--------------------------------分割线----------------------- 
  init_arr(&arr,6);
  
  //--------------------------------分割线----------------------- 
  for(j=0;j<5;j++){
     scanf("%d",pArr+j);
  }
  for(j=0;j<5;j++){
     printf("%d",*(pArr+j)); 
  }
 // printf("sid=%d,name=%s,age=%d\n",(*pst2).sid,(*pst2).name,(*pst2).age);
 free(pArr);
 free(p1);
   return 0;
}
