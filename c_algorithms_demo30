#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
typedef int zhangsan;
typedef struct Student{
  int sid;
  char name[200];
  int age;
}st;
typedef struct Student2{
  int sid;
  char name[200];
  int age;
}* PST;//PST等价于struct Student * 
typedef struct Node{
   int data;//数据域 
   struct Node * pNext;//指针域 
}NODE,*PNODE;
PNODE create_list(void){
   int len;
   int i;
   int val;
   PNODE pHead=(PNODE)malloc(sizeof(NODE));
   PNODE pTail=pHead;
   if(NULL == pHead)
   {
   	 printf("分配失败，程序终止!\n");
   	 exit(-1);
   }   
   pTail->pNext= NULL;
   printf("请输入您需要生成的链表节点的个数:len=");
   scanf("%d",&len);
   for(i=0;i<len;i++)
   {  
      PNODE pNew=(PNODE)malloc(sizeof(NODE));
   	  printf("请输入第%d个节点的值:",i+1);
   	  scanf("%d",&val);  	 
   	  if(NULL == pNew){
   	    printf("分配失败，程序终止!\n");
   	    exit(-1);
      }
   	  pNew->data=val;
   	  pTail->pNext=pNew;
   	  pNew->pNext=NULL;
   	  pTail=pNew;
   }
   return pHead;
}
void traverse_list(PNODE pHead){
	PNODE p=pHead->pNext;
	while(NULL != p)
	{
		printf("%d  ",p->data);
		p=p->pNext;
	}
	printf("\n");
	return;
}
int is_empty(PNODE pHead){
	if(NULL == pHead->pNext)
      return 1;
     else
       return 0; 
}
int length_list(PNODE pHead){
	int length=0;
	PNODE p= pHead->pNext;
	while(NULL != p)
	{
	  length++;
	  p=p->pNext;	
	}
	return length;
}
void sort_list(PNODE pHead){
   int i,j,t;
   PNODE p,q;
   int len=length_list(pHead);
   for(i=0,p=pHead->pNext;i<len-1;++i,p=p->pNext)
   {
   	  for(j=i+1,q=p->pNext;j<len;++j,q=q->pNext)
   	  {
   	  	 if(p->data>q->data)
   	  	 {
   	  	 	t=p->data;
   	  	 	p->data=q->data;
   	  	 	q->data=t;
   	  	 }
   	  }
   }
}
int insert_list(PNODE pHead,int pos,int val)
{
	int i=0;
	PNODE p=pHead;
	PNODE pNew=(PNODE)malloc(sizeof(NODE));
	PNODE q;
	while(NULL != p && i<pos-1)
	{
		p=p->pNext;
		++i;
	}
	if(i>pos-1 || NULL == p)
	  return 0;	
	if(NULL == pNew)
	{
		 printf("动态内存分配失败!\n");
		 exit(-1);
	}
	pNew->data=val;
	q=p->pNext;
	p->pNext=pNew;
	pNew->pNext=q;
	return 1;
}
int delete_list(PNODE pHead,int pos,int * pVal)
{
	int i=0;
	PNODE p=pHead;
	PNODE q;
	while(NULL != p->pNext && i<pos-1)
	{
		p=p->pNext;
		++i;
	}
	if(i>pos-1 || NULL == p->pNext)
	  return 0;		
	q=p->pNext;
	*pVal=q->data;
	p->pNext=p->pNext->pNext;
    free(q);
    q=NULL;
	return 1;
}
int main(void){
	PNODE pHead=NULL;
	int val;
	pHead=create_list();
	traverse_list(pHead);
	if(is_empty(pHead)){
	  printf("链表为空!\n");
	}
	insert_list(pHead,3,33);
	if(delete_list(pHead,4,&val)){
	  printf("删除成功，您删除的元素是%d!\n",val);
	}else{
	  printf("删除失败");
	}	
	sort_list(pHead);
	traverse_list(pHead);
	printf("链表长度为为%d!\n",length_list(pHead));
   return 0;	
}
